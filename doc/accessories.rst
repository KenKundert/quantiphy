.. index::
    single: accessories

.. _accessories:

Accessories
===========

A collection utility programs have been developed that employ *QuantiPhy* to 
enhance their functionality.


ec — Engineering Calculator
---------------------------

`ec <https://github.com/KenKundert/ec>`_ is a handy command-line calculator for 
engineers and scientists that employs Reverse-Polish Notation and allows numbers 
to be specified with units and SI scale factors.

::

    > ec
    0: 100k 50k ||
    33.333k:


tvm — Time Value of Money
-------------------------

`tvm <https://github.com/KenKundert/tvm>`_ is a command-line calculator that 
allows you to do interest or time-value of money calculations.  It focuses on 
providing a very efficient interface that encourages what-if calculations, and 
*QuantiPhy* helps because it allows you to use SI scale factors to represent 
large numbers and avoid typing out lots of zeros.

::

    > tvm --pv=-250k --rate=3.175 --years=30 pmt
    pv = -$250,000.00
    pmt = $1,077.75
    fv = $0.00
    r = 3.175%
    periods = 360
    years = 30


QuantiPhy Eval — Evaluate Expressions in Strings
------------------------------------------------

`QuantiPhy Eval <https://github.com/KenKundert/quantiphy_eval>`_ is yet another 
calculator, this one is a Python API that allows you to evaluate expressions 
that contain numbers with units and SI scale factors that are embedded in 
strings.

.. code-block:: python

    >>> from quantiphy_eval import evaluate

    >>> avg_price = evaluate('($1.2M + $1.3M)/2', '$')
    >>> print(avg_price)
    $1.25M


remind — Notify You at a Particular Time
----------------------------------------

`remind <https://github.com/KenKundert/remind>`_ is command line reminder 
program. At the appointed time it sends you a notification to remind you of some 
of event.  Such a program has no need for SI scale factors. Instead, this 
program uses the ability of *QuantiPhy* to scale numbers based on their units to 
provide a user-interface that takes convenient descriptions of time intervals 
such as 20m or 2h.

::

    > remind 45m remove roast from oven
    Alarm scheduled for 6:36 PM, 45 minutes from now.
    Message: remove roast from oven


RKM Codes
---------

RKM codes are used to represent electrical quantities in labels, particularly on
old schematics and on the components themselves. The popularity of RKM codes was fading because they address a problem that is
less common today. However they are making something of a come back as all the
characters in a RKM code are either letters or digits and so they can be
embedded in a software identifier without introducing illegal characters.

Essentially an RKM version of a number is the number with a scale factor where
the decimal point is replaced by the scale factor. For example, a resistance of
4.7kΩ becomes 4k7. If there is no scale factor, the decimal point is replaced by
a letter that signifies the type of the component.  For example, a resistance of
4.7Ω becomes 4r7.

The `RKM Codes <https://github.com/KenKundert/rkm_codes>`_ package is use to 
convert RKM Codes to :class:`quantiphy.Quantity` and visa versa.  For example:

.. code-block:: python

    >>> from rkm_codes import from_rkm, to_rkm

    >>> r = from_rkm('6K8')
    >>> r
    Quantity('6.8k')

    >>> to_rkm(r)
    '6K8'


PSF Utils
---------

`PSF Utils <https://github.com/KenKundert/psf_utils>`_ is a library that allows 
you to read data from a Spectre PSF ASCII file.
Spectre is a commercial circuit simulator produced by Cadence Design Systems.
PSF files contain signals generated by Spectre.  This package also contains two
programs that are useful in their own right, but also act as demonstrators as to
how to use the library. They are *list-psf* and *plot-psf*.  The first lists the
available signals in a file, and the other displays them.

*QuantiPhy* is used by *plot-psf* when generating the axis lables.
